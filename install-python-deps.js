#!/usr/bin/env node
/**
 * Script de instala√ß√£o das depend√™ncias Python para ZION
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

class PythonInstaller {
    constructor() {
        this.pythonCommands = ['python', 'python3', 'py'];
        this.pythonPath = null;
    }

    async findPython() {
        console.log(chalk.blue('üêç Procurando Python...'));
        
        for (const cmd of this.pythonCommands) {
            try {
                const result = await this.runCommand(cmd, ['--version']);
                if (result.includes('Python')) {
                    this.pythonPath = cmd;
                    console.log(chalk.green(`‚úÖ Python encontrado: ${cmd} (${result.trim()})`));
                    return true;
                }
            } catch (error) {
                continue;
            }
        }
        
        console.log(chalk.red('‚ùå Python n√£o encontrado!'));
        console.log(chalk.yellow('Por favor, instale Python 3.7+ em: https://python.org'));
        return false;
    }

    async runCommand(command, args = []) {
        return new Promise((resolve, reject) => {
            const process = spawn(command, args, { stdio: 'pipe' });
            
            let output = '';
            let error = '';
            
            process.stdout.on('data', (data) => {
                output += data.toString();
            });
            
            process.stderr.on('data', (data) => {
                error += data.toString();
            });
            
            process.on('close', (code) => {
                if (code === 0) {
                    resolve(output);
                } else {
                    reject(new Error(error || `Processo terminou com c√≥digo ${code}`));
                }
            });
        });
    }

    async checkPip() {
        console.log(chalk.blue('üìé Verificando pip...'));
        
        try {
            const result = await this.runCommand(this.pythonPath, ['-m', 'pip', '--version']);
            console.log(chalk.green(`‚úÖ pip encontrado: ${result.trim()}`));
            return true;
        } catch (error) {
            console.log(chalk.red('‚ùå pip n√£o encontrado!'));
            console.log(chalk.yellow('Tentando instalar pip...'));
            
            try {
                await this.runCommand(this.pythonPath, ['-m', 'ensurepip', '--upgrade']);
                console.log(chalk.green('‚úÖ pip instalado com sucesso!'));
                return true;
            } catch (pipError) {
                console.log(chalk.red('‚ùå Falha ao instalar pip'));
                return false;
            }
        }
    }

    async upgradePip() {
        console.log(chalk.blue('‚¨ÜÔ∏è Atualizando pip...'));
        
        try {
            await this.runCommand(this.pythonPath, ['-m', 'pip', 'install', '--upgrade', 'pip']);
            console.log(chalk.green('‚úÖ pip atualizado!'));
        } catch (error) {
            console.log(chalk.yellow('‚ö†Ô∏è  Falha ao atualizar pip (n√£o √© cr√≠tico)'));
        }
    }

    async installRequirements() {
        const requirementsPath = path.join(__dirname, 'requirements.txt');
        
        if (!fs.existsSync(requirementsPath)) {
            console.log(chalk.red('‚ùå Arquivo requirements.txt n√£o encontrado!'));
            return false;
        }

        console.log(chalk.blue('üì¶ Instalando depend√™ncias Python...'));
        console.log(chalk.gray('Isso pode levar alguns minutos...\n'));

        try {
            const process = spawn(this.pythonPath, [
                '-m', 'pip', 'install', '-r', requirementsPath, '--user'
            ], {
                stdio: 'inherit'
            });

            return new Promise((resolve, reject) => {
                process.on('close', (code) => {
                    if (code === 0) {
                        console.log(chalk.green('\n‚úÖ Depend√™ncias instaladas com sucesso!'));
                        resolve(true);
                    } else {
                        console.log(chalk.red('\n‚ùå Falha na instala√ß√£o das depend√™ncias'));
                        reject(new Error(`Processo pip terminou com c√≥digo ${code}`));
                    }
                });
            });
        } catch (error) {
            console.log(chalk.red('‚ùå Erro ao instalar depend√™ncias:'), error.message);
            return false;
        }
    }

    async testInstallation() {
        console.log(chalk.blue('üß™ Testando instala√ß√£o...'));
        
        const packages = [
            'pyttsx3',
            'speech_recognition', 
            'pyautogui',
            'psutil'
        ];

        const results = {};
        
        for (const pkg of packages) {
            try {
                await this.runCommand(this.pythonPath, ['-c', `import ${pkg}; print('${pkg}: OK')`]);
                results[pkg] = true;
                console.log(chalk.green(`‚úÖ ${pkg}`));
            } catch (error) {
                results[pkg] = false;
                console.log(chalk.red(`‚ùå ${pkg}`));
            }
        }

        const allInstalled = Object.values(results).every(installed => installed);
        
        if (allInstalled) {
            console.log(chalk.green('\nüéâ Todas as depend√™ncias foram instaladas com sucesso!'));
        } else {
            console.log(chalk.yellow('\n‚ö†Ô∏è  Algumas depend√™ncias falharam. Voc√™ pode tentar reinstalar manualmente:'));
            
            Object.entries(results).forEach(([pkg, installed]) => {
                if (!installed) {
                    console.log(chalk.gray(`   pip install ${pkg}`));
                }
            });
        }
        
        return allInstalled;
    }

    async showUsageInstructions() {
        console.log(chalk.cyan('\nüìö COMO USAR:'));
        console.log(chalk.white('1. Inicie a ZION normalmente:'));
        console.log(chalk.gray('   node zion.js'));
        console.log(chalk.white('\n2. Use os comandos de voz:'));
        console.log(chalk.gray('   /voice speak "Ol√° mundo"'));
        console.log(chalk.gray('   /voice listen'));
        console.log(chalk.gray('   /voice start'));
        console.log(chalk.gray('   /tts "Teste de voz"'));
        console.log(chalk.gray('   /stt'));
        console.log(chalk.gray('   /control open "notepad"'));
        
        console.log(chalk.white('\n3. Comandos de voz suportados:'));
        console.log(chalk.gray('   - "abrir navegador"'));
        console.log(chalk.gray('   - "abrir calculadora"'));
        console.log(chalk.gray('   - "tirar screenshot"'));
        console.log(chalk.gray('   - "aumentar volume"'));
        console.log(chalk.gray('   - "bloquear tela"'));
        console.log(chalk.gray('   - E muitos outros...'));
        
        console.log(chalk.white('\n4. Para ver todos os comandos dispon√≠veis:'));
        console.log(chalk.gray('   /help voice'));
        console.log();
    }

    async install() {
        console.log(chalk.blue('üîß ZION - Instalador de Depend√™ncias Python'));
        console.log(chalk.gray('Configurando TTS, STT e controle do computador...\n'));
        
        try {
            // 1. Encontrar Python
            const pythonFound = await this.findPython();
            if (!pythonFound) {
                return false;
            }

            // 2. Verificar/instalar pip
            const pipOk = await this.checkPip();
            if (!pipOk) {
                return false;
            }

            // 3. Atualizar pip
            await this.upgradePip();

            // 4. Instalar depend√™ncias
            const installed = await this.installRequirements();
            if (!installed) {
                return false;
            }

            // 5. Testar instala√ß√£o
            const tested = await this.testInstallation();
            
            // 6. Mostrar instru√ß√µes
            await this.showUsageInstructions();
            
            return tested;
            
        } catch (error) {
            console.log(chalk.red('‚ùå Erro durante a instala√ß√£o:'), error.message);
            return false;
        }
    }
}

// Executar instala√ß√£o se chamado diretamente
if (require.main === module) {
    const installer = new PythonInstaller();
    
    installer.install().then(success => {
        if (success) {
            console.log(chalk.green('üéÜ Instala√ß√£o conclu√≠da com sucesso!'));
            process.exit(0);
        } else {
            console.log(chalk.red('‚ùå Instala√ß√£o falhou. Verifique os erros acima.'));
            process.exit(1);
        }
    }).catch(error => {
        console.error(chalk.red('‚ùå Erro cr√≠tico:'), error.message);
        process.exit(1);
    });
}

module.exports = PythonInstaller;

