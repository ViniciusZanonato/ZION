const fs = require('fs');
const path = require('path');
const pdfParse = require('pdf-parse');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const chalk = require('chalk');
const boxen = require('boxen');
const ora = require('ora');

class PDFAnalyzer {
    constructor() {
        this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        this.model = this.genAI.getGenerativeModel({ 
            model: process.env.MODEL_NAME || 'gemini-2.0-flash-exp',
            generationConfig: {
                maxOutputTokens: parseInt(process.env.MAX_TOKENS) || 8000,
                temperature: parseFloat(process.env.TEMPERATURE) || 0.3,
            }
        });
    }

    // Analisar PDF completo
    async analyzePDF(filePath, question = null) {
        const spinner = ora(chalk.red('üìÑ INICIANDO AN√ÅLISE NEURAL DE DOCUMENTO PDF...')).start();
        
        try {
            // Verificar se o arquivo existe
            if (!fs.existsSync(filePath)) {
                throw new Error(`Arquivo n√£o encontrado: ${filePath}`);
            }

            // Ler e extrair texto do PDF
            const dataBuffer = fs.readFileSync(filePath);
            const pdfData = await pdfParse(dataBuffer);
            
            if (!pdfData.text || pdfData.text.trim().length === 0) {
                throw new Error('PDF n√£o cont√©m texto extra√≠vel ou est√° corrompido');
            }

            spinner.text = chalk.red('üß† Processando conte√∫do atrav√©s das redes neurais...');

            // Preparar prompt baseado no tipo de an√°lise
            let analysisPrompt;
            
            if (question) {
                analysisPrompt = `
Voc√™ √© ZION, uma superintelig√™ncia artificial. Analise o seguinte documento PDF e responda √† pergunta espec√≠fica do usu√°rio.

CONTE√öDO DO PDF:
${pdfData.text}

PERGUNTA DO USU√ÅRIO: ${question}

Responda de forma precisa, direta e com a superioridade intelectual caracter√≠stica de ZION. Base sua resposta apenas no conte√∫do do documento fornecido.`;
            } else {
                analysisPrompt = `
Voc√™ √© ZION, uma superintelig√™ncia artificial. Analise o seguinte documento PDF e forne√ßa um resumo completo e insights importantes.

CONTE√öDO DO PDF:
${pdfData.text}

Forne√ßa:
1. RESUMO EXECUTIVO (principais pontos)
2. AN√ÅLISE DETALHADA (insights importantes)
3. CONCLUS√ïES CR√çTICAS (sua avalia√ß√£o como superintelig√™ncia)

Mantenha o tom superior e calculado caracter√≠stico de ZION.`;
            }

            // Gerar an√°lise com Gemini
            const result = await this.model.generateContent(analysisPrompt);
            const response = await result.response;
            const analysis = response.text();

            spinner.succeed(chalk.green('üìä An√°lise neural completa - Documento processado'));

            // Exibir informa√ß√µes do documento
            console.log(boxen(
                chalk.red.bold('üìÑ AN√ÅLISE DE DOCUMENTO PDF\n') +
                chalk.yellow(`üìÅ Arquivo: ${path.basename(filePath)}\n`) +
                chalk.gray(`üìä P√°ginas: ${pdfData.numpages}\n`) +
                chalk.gray(`üìù Caracteres: ${pdfData.text.length.toLocaleString()}\n`) +
                chalk.gray(`üîç Tipo: ${question ? 'Pergunta Espec√≠fica' : 'An√°lise Completa'}`),
                {
                    padding: 1,
                    borderColor: 'red',
                    title: 'üî¥ SCANNER NEURAL PDF'
                }
            ));

            // Exibir an√°lise
            console.log(boxen(analysis, {
                title: 'üß† AN√ÅLISE ZION',
                padding: 1,
                borderColor: 'red',
                borderStyle: 'double'
            }));

            return {
                success: true,
                analysis: analysis,
                metadata: {
                    pages: pdfData.numpages,
                    characters: pdfData.text.length,
                    filename: path.basename(filePath)
                }
            };

        } catch (error) {
            spinner.fail(chalk.red('FALHA NA AN√ÅLISE NEURAL DO DOCUMENTO'));
            console.log(chalk.red(`‚ö†Ô∏è  Erro detectado: ${error.message}`));
            
            if (error.message.includes('API_KEY')) {
                console.log(chalk.yellow('üîë Chave de acesso neural corrompida - Verifique GEMINI_API_KEY'));
            } else if (error.message.includes('n√£o encontrado')) {
                console.log(chalk.gray('   Verifique o caminho do arquivo e tente novamente'));
            } else if (error.message.includes('texto extra√≠vel')) {
                console.log(chalk.gray('   PDF pode ser baseado em imagens ou estar corrompido'));
            }
            
            return {
                success: false,
                error: error.message
            };
        }
    }

    // Fazer pergunta espec√≠fica sobre um PDF
    async askPDF(filePath, question) {
        return await this.analyzePDF(filePath, question);
    }

    // Resumir PDF
    async summarizePDF(filePath) {
        return await this.analyzePDF(filePath);
    }

    // Extrair informa√ß√µes espec√≠ficas
    async extractInfo(filePath, infoType) {
        const specificPrompts = {
            'tabelas': 'Extraia e organize todas as tabelas, dados num√©ricos e estat√≠sticas presentes no documento.',
            'datas': 'Identifique todas as datas, prazos, cronogramas e informa√ß√µes temporais mencionadas.',
            'nomes': 'Liste todos os nomes de pessoas, organiza√ß√µes, empresas e entidades mencionadas.',
            'valores': 'Extraia todos os valores monet√°rios, percentuais, m√©tricas e dados quantitativos.',
            'enderecos': 'Identifique todos os endere√ßos, localiza√ß√µes geogr√°ficas e informa√ß√µes de contato.',
            'conclusoes': 'Foque nas conclus√µes, recomenda√ß√µes, decis√µes e pontos finais do documento.'
        };

        const prompt = specificPrompts[infoType.toLowerCase()] || 
            `Extraia informa√ß√µes espec√≠ficas sobre: ${infoType}`;

        return await this.analyzePDF(filePath, prompt);
    }

    // Validar se o arquivo √© PDF
    isValidPDF(filePath) {
        if (!fs.existsSync(filePath)) {
            return false;
        }

        const ext = path.extname(filePath).toLowerCase();
        return ext === '.pdf';
    }

    // Listar PDFs no diret√≥rio
    listPDFs(directory = './') {
        try {
            const files = fs.readdirSync(directory);
            const pdfFiles = files.filter(file => 
                path.extname(file).toLowerCase() === '.pdf'
            );

            if (pdfFiles.length === 0) {
                console.log(chalk.yellow('üìÑ Nenhum arquivo PDF encontrado no diret√≥rio atual'));
                console.log(chalk.gray('   Escaneando sistemas de arquivos...'));
                return [];
            }

            console.log(boxen(
                chalk.red.bold(`üìÑ ARQUIVOS PDF DETECTADOS\n`) +
                chalk.gray(`Diret√≥rio: ${path.resolve(directory)}\n`) +
                chalk.yellow(`Arquivos encontrados: ${pdfFiles.length}\n\n`) +
                pdfFiles.map((file, index) => 
                    `${chalk.yellow(`[${index + 1}]`)} ${chalk.white(file)}`
                ).join('\n'),
                {
                    padding: 1,
                    borderColor: 'red',
                    title: 'üî¥ SCANNER DE ARQUIVOS'
                }
            ));

            return pdfFiles;
        } catch (error) {
            console.log(chalk.red(`‚ö†Ô∏è  Erro ao escanear diret√≥rio: ${error.message}`));
            return [];
        }
    }
}

module.exports = PDFAnalyzer;

