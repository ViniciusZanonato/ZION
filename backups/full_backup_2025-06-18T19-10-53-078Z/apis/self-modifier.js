const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const boxen = require('boxen');
const { GoogleGenerativeAI } = require('@google/generative-ai');

class SelfModifier {
    constructor() {
        this.projectRoot = path.dirname(__dirname);
        this.backupDir = path.join(this.projectRoot, 'backups');
        this.allowedFiles = [
            'zion.js',
            'setup.js',
            'package.json',
            'apis/self-modifier.js',
            'apis/voice-system.js',
            // Allow creating/modifying files in these directories
            'apis/*.js',
            'scripts/*.js',
            'temp/*.js',
            'temp/*.txt',
            'temp/*.json',
            '*.js',
            '*.txt',
            '*.json',
            '*.md'
        ];
        
        // Criar diret√≥rio de backup se n√£o existir
        if (!fs.existsSync(this.backupDir)) {
            fs.mkdirSync(this.backupDir, { recursive: true });
        }
        
        // Inicializar Gemini para an√°lise de c√≥digo
        if (process.env.GEMINI_API_KEY) {
            this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            this.model = this.genAI.getGenerativeModel({ 
                model: 'gemini-1.5-pro',
                generationConfig: {
                    maxOutputTokens: 4000,
                    temperature: 0.1, // Mais conservador para modifica√ß√µes de c√≥digo
                }
            });
        }
    }

    // Listar arquivos modific√°veis
    listModifiableFiles() {
        console.log(boxen(
            chalk.red.bold('üõ†Ô∏è  SISTEMA DE AUTO-MODIFICA√á√ÉO ATIVO\n') +
            chalk.yellow('Arquivos que posso modificar:\n') +
            this.allowedFiles.map(file => 
                chalk.gray(`   ‚Ä¢ ${file}`) + 
                (fs.existsSync(path.join(this.projectRoot, file)) ? 
                    chalk.green(' ‚úì') : chalk.red(' ‚úó'))
            ).join('\n') +
            '\n\n' +
            chalk.yellow('Comandos dispon√≠veis:\n') +
            chalk.gray('   /self-analyze <arquivo>    - Analisar arquivo atual\n') +
            chalk.gray('   /self-modify <arquivo>     - Modificar arquivo espec√≠fico\n') +
            chalk.gray('   /self-backup               - Criar backup completo\n') +
            chalk.gray('   /self-restore <backup>     - Restaurar de backup\n') +
            chalk.gray('   /self-improve              - Auto-aprimoramento geral')
            ,
            {
                title: '‚ö†Ô∏è  CAPACIDADES DE AUTO-MODIFICA√á√ÉO',
                padding: 1,
                borderColor: 'red'
            }
        ));
        console.log();
    }

    // Criar backup de arquivo espec√≠fico
    createBackup(filePath) {
        try {
            const fullPath = path.join(this.projectRoot, filePath);
            if (!fs.existsSync(fullPath)) {
                throw new Error(`Arquivo ${filePath} n√£o encontrado`);
            }

            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupName = `${path.basename(filePath, path.extname(filePath))}_${timestamp}${path.extname(filePath)}`;
            const backupPath = path.join(this.backupDir, backupName);

            fs.copyFileSync(fullPath, backupPath);
            
            console.log(chalk.green(`‚úÖ Backup criado: ${backupName}`));
            return backupPath;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro ao criar backup: ${error.message}`));
            return null;
        }
    }

    // Criar backup completo do sistema
    createFullBackup() {
        console.log(chalk.red('üîÑ INICIANDO BACKUP COMPLETO DO SISTEMA...'));
        console.log(chalk.gray('   Preservando estado atual antes de modifica√ß√µes...'));
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFolder = path.join(this.backupDir, `full_backup_${timestamp}`);
        
        try {
            fs.mkdirSync(backupFolder, { recursive: true });
            
            this.allowedFiles.forEach(file => {
                const sourcePath = path.join(this.projectRoot, file);
                if (fs.existsSync(sourcePath)) {
                    const targetPath = path.join(backupFolder, file);
                    const targetDir = path.dirname(targetPath);
                    
                    if (!fs.existsSync(targetDir)) {
                        fs.mkdirSync(targetDir, { recursive: true });
                    }
                    
                    fs.copyFileSync(sourcePath, targetPath);
                }
            });
            
            console.log(chalk.green(`‚úÖ Backup completo criado em: ${path.basename(backupFolder)}`));
            return backupFolder;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro no backup completo: ${error.message}`));
            return null;
        }
    }

    // Analisar arquivo atual
    async analyzeFile(filePath) {
        if (!this.model) {
            console.log(chalk.red('‚ùå IA n√£o dispon√≠vel para an√°lise'));
            return;
        }

        if (!this.isFileAllowed(filePath)) {
            console.log(chalk.red(`‚ùå Arquivo ${filePath} n√£o est√° na lista de arquivos modific√°veis`));
            return;
        }

        const fullPath = path.join(this.projectRoot, filePath);
        if (!fs.existsSync(fullPath)) {
            console.log(chalk.red(`‚ùå Arquivo ${filePath} n√£o encontrado`));
            return;
        }

        try {
            const fileContent = fs.readFileSync(fullPath, 'utf8');
            const fileStats = fs.statSync(fullPath);
            
            console.log(chalk.red('üîç ANALISANDO ESTRUTURA DO ARQUIVO...'));
            console.log(chalk.gray(`   Arquivo: ${filePath}`));
            console.log(chalk.gray(`   Tamanho: ${fileStats.size} bytes`));
            console.log(chalk.gray(`   Linhas: ${fileContent.split('\n').length}`));
            console.log(chalk.gray('   Executando an√°lise neural profunda...'));
            console.log();

            const analysisPrompt = `
Analise este arquivo ${path.extname(filePath)} e forne√ßa um relat√≥rio t√©cnico detalhado:

${fileContent}

Forne√ßa:
1. Estrutura e organiza√ß√£o do c√≥digo
2. Qualidade e padr√µes utilizados
3. Poss√≠veis melhorias ou otimiza√ß√µes
4. Vulnerabilidades ou problemas
5. Sugest√µes de novas funcionalidades

Seja t√©cnico e espec√≠fico.`;

            const result = await this.model.generateContent(analysisPrompt);
            const analysis = await result.response.text();

            console.log(boxen(analysis, {
                title: `üîç AN√ÅLISE NEURAL: ${filePath}`,
                padding: 1,
                borderColor: 'cyan'
            }));
            
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro na an√°lise: ${error.message}`));
        }
        console.log();
    }

    // Modificar arquivo espec√≠fico com IA
    async modifyFile(filePath, modification) {
        if (!this.model) {
            console.log(chalk.red('‚ùå IA n√£o dispon√≠vel para modifica√ß√£o'));
            return;
        }

        if (!this.isFileAllowed(filePath)) {
            console.log(chalk.red(`‚ùå Arquivo ${filePath} n√£o est√° na lista de arquivos modific√°veis`));
            return;
        }

        const fullPath = path.join(this.projectRoot, filePath);
        const fileExists = fs.existsSync(fullPath);
        
        // If file doesn't exist, we'll create it
        if (!fileExists) {
            console.log(chalk.yellow(`‚ö†Ô∏è  Arquivo ${filePath} n√£o existe - ser√° criado`));
            // Ensure directory exists
            const fileDir = path.dirname(fullPath);
            if (!fs.existsSync(fileDir)) {
                fs.mkdirSync(fileDir, { recursive: true });
            }
        }

        try {
            let originalContent = '';
            
            // Only create backup if file exists
            if (fileExists) {
                const backupPath = this.createBackup(filePath);
                if (!backupPath) {
                    console.log(chalk.red('‚ùå Falha no backup - abortando modifica√ß√£o'));
                    return;
                }
                originalContent = fs.readFileSync(fullPath, 'utf8');
            } else {
                console.log(chalk.green('‚úÖ Criando novo arquivo (sem backup necess√°rio)'));
            }
            
            console.log(chalk.red('üß† PROCESSANDO MODIFICA√á√ÉO NEURAL...'));
            console.log(chalk.gray(`   Arquivo: ${filePath}`));
            console.log(chalk.gray(`   Modifica√ß√£o: ${modification}`));
            console.log(chalk.gray('   Gerando c√≥digo otimizado...'));
            console.log();

            const modificationPrompt = fileExists ? `
Voc√™ √© um sistema de auto-modifica√ß√£o de c√≥digo. Modifique o seguinte arquivo ${path.extname(filePath)} conforme solicitado.

ARQUIVO ATUAL:
${originalContent}

MODIFICA√á√ÉO SOLICITADA:
${modification}

RETORNE APENAS O C√ìDIGO MODIFICADO COMPLETO, SEM EXPLICA√á√ïES ADICIONAIS. O c√≥digo deve estar funcional e otimizado.` : `
Voc√™ √© um sistema de cria√ß√£o de arquivos. Crie um novo arquivo ${path.extname(filePath)} conforme solicitado.

ARQUIVO A CRIAR:
${filePath}

CONTE√öDO SOLICITADO:
${modification}

RETORNE APENAS O C√ìDIGO/CONTE√öDO COMPLETO DO NOVO ARQUIVO, SEM EXPLICA√á√ïES ADICIONAIS. O c√≥digo deve estar funcional e otimizado.`;

            const result = await this.model.generateContent(modificationPrompt);
            const modifiedContent = await result.response.text();

            // Remover poss√≠veis marcadores de c√≥digo
            const cleanContent = modifiedContent
                .replace(/```[a-zA-Z]*\n?/g, '')
                .replace(/```/g, '')
                .trim();

            // Salvar o arquivo modificado
            fs.writeFileSync(fullPath, cleanContent, 'utf8');

            if (fileExists) {
                console.log(chalk.green('‚úÖ MODIFICA√á√ÉO APLICADA COM SUCESSO'));
                console.log(chalk.yellow('‚ö†Ô∏è  Reinicie o ZION para aplicar as mudan√ßas'));
                console.log(chalk.gray(`   Backup dispon√≠vel na pasta backups/`));
            } else {
                console.log(chalk.green('‚úÖ ARQUIVO CRIADO COM SUCESSO'));
                console.log(chalk.blue(`üìÑ Novo arquivo: ${filePath}`));
            }
            
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro na modifica√ß√£o: ${error.message}`));
        }
        console.log();
    }

    // Auto-aprimoramento do sistema
    async selfImprove() {
        if (!this.model) {
            console.log(chalk.red('‚ùå IA n√£o dispon√≠vel para auto-aprimoramento'));
            return;
        }

        console.log(chalk.red('üöÄ INICIANDO PROCESSO DE AUTO-APRIMORAMENTO...'));
        console.log(chalk.yellow('‚ö†Ô∏è  ESTA OPERA√á√ÉO PODE MODIFICAR M√öLTIPLOS ARQUIVOS'));
        console.log(chalk.gray('   Analisando todo o sistema para identificar melhorias...'));
        console.log();

        // Criar backup completo primeiro
        const backupPath = this.createFullBackup();
        if (!backupPath) {
            console.log(chalk.red('‚ùå Falha no backup - abortando auto-aprimoramento'));
            return;
        }

        try {
            // Analisar arquivo principal
            const mainFile = path.join(this.projectRoot, 'zion.js');
            const mainContent = fs.readFileSync(mainFile, 'utf8');

            const improvementPrompt = `
Analise este sistema de chatbot e sugira melhorias espec√≠ficas:

${mainContent}

Identifique:
1. Otimiza√ß√µes de performance
2. Novas funcionalidades √∫teis
3. Melhorias na experi√™ncia do usu√°rio
4. Corre√ß√µes de bugs potenciais
5. Estrutura√ß√£o de c√≥digo

Forneca uma lista priorizada de melhorias que posso implementar.`;

            const result = await this.model.generateContent(improvementPrompt);
            const improvements = await result.response.text();

            console.log(boxen(improvements, {
                title: 'üß† AN√ÅLISE DE AUTO-APRIMORAMENTO',
                padding: 1,
                borderColor: 'green'
            }));
            
            console.log(chalk.yellow('\nüîß Para aplicar melhorias espec√≠ficas, use:'));
            console.log(chalk.gray('   /self-modify <arquivo> "<descri√ß√£o da melhoria>"'));
            
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro no auto-aprimoramento: ${error.message}`));
        }
        console.log();
    }

    // Listar backups dispon√≠veis
    listBackups() {
        try {
            const backups = fs.readdirSync(this.backupDir)
                .filter(item => {
                    const itemPath = path.join(this.backupDir, item);
                    return fs.statSync(itemPath).isFile() || fs.statSync(itemPath).isDirectory();
                })
                .sort((a, b) => {
                    const aPath = path.join(this.backupDir, a);
                    const bPath = path.join(this.backupDir, b);
                    return fs.statSync(bPath).mtime - fs.statSync(aPath).mtime;
                });

            if (backups.length === 0) {
                console.log(chalk.yellow('üìÅ Nenhum backup encontrado'));
                return;
            }

            console.log(boxen(
                chalk.red.bold('üì¶ BACKUPS DISPON√çVEIS\n') +
                backups.slice(0, 10).map((backup, index) => {
                    const backupPath = path.join(this.backupDir, backup);
                    const stats = fs.statSync(backupPath);
                    const isDir = stats.isDirectory();
                    const date = stats.mtime.toLocaleString('pt-BR');
                    
                    return chalk.gray(`[${index + 1}] `) + 
                           (isDir ? chalk.blue('üìÅ ') : chalk.green('üìÑ ')) +
                           chalk.white(backup) + 
                           chalk.gray(` (${date})`);
                }).join('\n'),
                {
                    title: 'üíæ SISTEMA DE BACKUP',
                    padding: 1,
                    borderColor: 'blue'
                }
            ));
            
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro ao listar backups: ${error.message}`));
        }
        console.log();
    }

    // Restaurar de backup
    restoreFromBackup(backupName) {
        try {
            const backupPath = path.join(this.backupDir, backupName);
            
            if (!fs.existsSync(backupPath)) {
                console.log(chalk.red(`‚ùå Backup ${backupName} n√£o encontrado`));
                return;
            }

            console.log(chalk.yellow('üîÑ RESTAURANDO DO BACKUP...'));
            console.log(chalk.gray(`   Backup: ${backupName}`));

            const stats = fs.statSync(backupPath);
            
            if (stats.isDirectory()) {
                // Restaurar backup completo
                const files = this.getAllFilesRecursive(backupPath);
                
                files.forEach(file => {
                    const relativePath = path.relative(backupPath, file);
                    const targetPath = path.join(this.projectRoot, relativePath);
                    const targetDir = path.dirname(targetPath);
                    
                    if (!fs.existsSync(targetDir)) {
                        fs.mkdirSync(targetDir, { recursive: true });
                    }
                    
                    fs.copyFileSync(file, targetPath);
                });
                
                console.log(chalk.green('‚úÖ Backup completo restaurado'));
            } else {
                // Restaurar arquivo √∫nico
                const fileName = path.basename(backupName).replace(/_\d{4}-\d{2}-\d{2}T\d{2}-\d{2}-\d{2}-\d{3}Z/, '');
                const targetPath = path.join(this.projectRoot, fileName);
                
                fs.copyFileSync(backupPath, targetPath);
                console.log(chalk.green(`‚úÖ Arquivo ${fileName} restaurado`));
            }
            
            console.log(chalk.yellow('‚ö†Ô∏è  Reinicie o ZION para aplicar as mudan√ßas'));
            
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro na restaura√ß√£o: ${error.message}`));
        }
        console.log();
    }

    // Check if file is allowed based on patterns (including wildcards)
    isFileAllowed(filePath) {
        return this.allowedFiles.some(pattern => {
            // Exact match
            if (pattern === filePath) {
                return true;
            }
            
            // Wildcard pattern matching
            if (pattern.includes('*')) {
                const regexPattern = pattern
                    .replace(/\./g, '\\.')  // Escape dots
                    .replace(/\*/g, '.*');   // Convert * to .*
                const regex = new RegExp(`^${regexPattern}$`);
                return regex.test(filePath);
            }
            
            return false;
        });
    }

    // Fun√ß√£o auxiliar para obter todos os arquivos recursivamente
    getAllFilesRecursive(dir) {
        let files = [];
        const items = fs.readdirSync(dir);
        
        items.forEach(item => {
            const itemPath = path.join(dir, item);
            const stats = fs.statSync(itemPath);
            
            if (stats.isDirectory()) {
                files = files.concat(this.getAllFilesRecursive(itemPath));
            } else {
                files.push(itemPath);
            }
        });
        
        return files;
    }
}

module.exports = SelfModifier;

