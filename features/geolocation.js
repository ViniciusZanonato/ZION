// ===================================================================
// üåç M√ìDULO DE GEOLOCALIZA√á√ÉO E MAPAS - ZION SUPREMO
// Implementa√ß√£o de APIs gratuitas para localiza√ß√£o e mapas
// ===================================================================

const fetch = require('node-fetch');
const chalk = require('chalk');
const boxen = require('boxen');
const ora = require('ora');

class GeolocationModule {
    constructor() {
        this.name = 'VARREDURA DIMENSIONAL';
        this.description = 'Sensores de geolocaliza√ß√£o e an√°lise territorial';
    }

    // OpenStreetMap Nominatim - Geocoding Gratuito
    async geocodeLocation(location) {
        const spinner = ora(chalk.red(`üåç Triangulando coordenadas dimensionais: ${location}...`)).start();
        
        try {
            const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&limit=1&addressdetails=1`;
            
            const response = await fetch(url, {
                headers: {
                    'User-Agent': 'ZION-Neural-Network/1.0 (Dimensional-Scanner)'
                }
            });
            
            if (!response.ok) {
                throw new Error(`Falha na triangula√ß√£o: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data && data.length > 0) {
                const result = data[0];
                
                spinner.succeed(chalk.green(`üì° Coordenadas identificadas: ${result.display_name}`));
                
                const geoData = {
                    nome: result.display_name,
                    latitude: parseFloat(result.lat),
                    longitude: parseFloat(result.lon),
                    tipo: result.type,
                    categoria: result.class,
                    endereco: result.address || {},
                    bbox: result.boundingbox
                };
                
                return geoData;
            } else {
                spinner.warn(chalk.yellow('üåç Localiza√ß√£o n√£o encontrada nos sensores globais'));
                return null;
            }
            
        } catch (error) {
            spinner.fail(chalk.red('FALHA NA TRIANGULA√á√ÉO DIMENSIONAL'));
            console.log(chalk.red(`‚ö†Ô∏è  Interfer√™ncia detectada: ${error.message}`));
            return null;
        }
    }

    // Exibir informa√ß√µes geogr√°ficas detalhadas
    async showDetailedLocation(location) {
        const geoData = await this.geocodeLocation(location);
        
        if (!geoData) {
            console.log(chalk.red('‚ùå Falha na an√°lise dimensional'));
            return;
        }
        
        const map = this.generateASCIIMap(geoData);
        
        const locationInfo = `
üéØ COORDENADAS: ${geoData.latitude.toFixed(6)}, ${geoData.longitude.toFixed(6)}
üìç TIPO: ${geoData.tipo} (${geoData.categoria})
üåê REGI√ÉO: ${this.getRegionFromCoordinates(geoData.latitude, geoData.longitude)}
üó∫Ô∏è  QUADRANTE: ${this.getQuadrant(geoData.latitude, geoData.longitude)}
${geoData.endereco.country ? `üèÅ PA√çS: ${geoData.endereco.country}` : ''}
${geoData.endereco.state ? `üèõÔ∏è  ESTADO: ${geoData.endereco.state}` : ''}
${geoData.endereco.city ? `üèôÔ∏è  CIDADE: ${geoData.endereco.city}` : ''}`;
        
        console.log(boxen(
            chalk.red.bold(`üåç AN√ÅLISE DIMENSIONAL COMPLETA\n`) +
            chalk.yellow(`üì° ALVO: ${geoData.nome}\n`) +
            chalk.white(locationInfo),
            {
                padding: 1,
                borderColor: 'red',
                title: 'üî¥ VARREDURA GEOESPACIAL'
            }
        ));
        
        console.log(map);
        console.log(chalk.gray('   Dados coletados via OpenStreetMap - Rede global de sensores'));
        console.log();
    }

    // Gerar mapa ASCII baseado nas coordenadas
    generateASCIIMap(geoData) {
        const { latitude, longitude, nome } = geoData;
        
        // Determinar caracter√≠sticas do terreno baseado nas coordenadas
        const isCoastal = this.isCoastalArea(latitude, longitude);
        const isMountainous = this.isMountainousArea(latitude, longitude);
        const isUrban = geoData.categoria === 'amenity' || geoData.categoria === 'building';
        
        let terrain = '';
        if (isCoastal) {
            terrain = `
‚ïë    ‚õ∞Ô∏è      ‚ñ≤‚ñ≤‚ñ≤     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚âã‚âã‚âã‚âã‚âã‚âã   ‚ïë
‚ïë  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤   ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚âã‚âã‚âã‚âã‚âã‚âã‚âã‚âã‚âã ‚ïë
‚ïë     ‚ñ≤‚ñ≤      ‚ñ≤‚ñ≤‚ñ≤     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚âã‚âã‚âã‚âã‚âã‚âã   ‚ïë
‚ïë                             ‚âã‚âã‚âã‚âã‚âã‚âã   ‚ïë
‚ïë         üèñÔ∏è ZONA COSTEIRA ‚âã‚âã‚âã‚âã‚âã‚âã‚âã‚âã‚âã  ‚ïë`;
        } else if (isMountainous) {
            terrain = `
‚ïë      ‚õ∞Ô∏è  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤  üóª  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤      ‚ïë
‚ïë    ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤     ‚ïë
‚ïë  ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤   ‚ïë
‚ïë ‚ñ≤‚ñ≤‚ñ≤‚ñ≤     üèîÔ∏è REGI√ÉO MONTANHOSA    ‚ñ≤‚ñ≤ ‚ïë
‚ïë   ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤     ‚ïë`;
        } else if (isUrban) {
            terrain = `
‚ïë    üèôÔ∏è  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ïë
‚ïë      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ïë
‚ïë      üè¢ ZONA URBANA üè¨ ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ïë`;
        } else {
            terrain = `
‚ïë    üåæ      üå≥üå≥üå≥     üåøüåøüåøüåø        ‚ïë
‚ïë  üåæüåæüåæ   üå≥üå≥üå≥üå≥üå≥   üåøüåøüåøüåøüåøüåø     ‚ïë
‚ïë     üåæ      üå≥üå≥üå≥     üåøüåøüåøüåø        ‚ïë
‚ïë        üå± REGI√ÉO RURAL üåæ           ‚ïë
‚ïë      üå≥üå≥üå≥üå≥üå≥üå≥üå≥üå≥üå≥üå≥üå≥           ‚ïë`;
        }
        
        const map = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üéØ MAPA DIMENSIONAL          ‚ïë
‚ïë   ALVO: ${nome.substring(0, 25).padEnd(25)} ‚ïë
‚ïë                                     ‚ïë${terrain}
‚ïë                                     ‚ïë
‚ïë  üìç LAT: ${latitude.toFixed(4).padEnd(8)} LON: ${longitude.toFixed(4).padEnd(8)} ‚ïë
‚ïë     [ AN√ÅLISE GEOESPACIAL ]         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
        
        return chalk.red(map);
    }

    // Determinar regi√£o baseada nas coordenadas
    getRegionFromCoordinates(lat, lon) {
        if (lat >= -90 && lat <= -60) return 'ANT√ÅRTICA';
        if (lat >= -60 && lat <= -23.5) return 'HEMISF√âRIO SUL';
        if (lat >= -23.5 && lat <= 23.5) return 'ZONA TROPICAL';
        if (lat >= 23.5 && lat <= 66.5) return 'ZONA TEMPERADA NORTE';
        if (lat >= 66.5 && lat <= 90) return '√ÅRTICO';
        return 'INDEFINIDA';
    }

    // Determinar quadrante
    getQuadrant(lat, lon) {
        const latDir = lat >= 0 ? 'N' : 'S';
        const lonDir = lon >= 0 ? 'E' : 'W';
        return `${latDir}${lonDir}`;
    }

    // Verificar se √© √°rea costeira (simplificado)
    isCoastalArea(lat, lon) {
        // L√≥gica simplificada - em uma implementa√ß√£o real, usaria dados geogr√°ficos
        return Math.abs(lat) < 70 && (Math.abs(lon) % 30 < 5);
    }

    // Verificar se √© √°rea montanhosa (simplificado)
    isMountainousArea(lat, lon) {
        // L√≥gica simplificada baseada em coordenadas conhecidas de cadeias montanhosas
        return (Math.abs(lat) > 30 && Math.abs(lat) < 60) || 
               (lat > 10 && lat < 30 && lon > -120 && lon < -80); // Am√©ricas
    }

    // Buscar m√∫ltiplas localiza√ß√µes
    async searchMultipleLocations(locations) {
        const results = [];
        
        for (const location of locations) {
            const result = await this.geocodeLocation(location);
            if (result) {
                results.push(result);
            }
            // Delay para n√£o sobrecarregar a API
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        return results;
    }

    // Calcular dist√¢ncia entre dois pontos (f√≥rmula de Haversine)
    calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Raio da Terra em km
        const dLat = this.toRadians(lat2 - lat1);
        const dLon = this.toRadians(lon2 - lon1);
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *
                  Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }

    toRadians(degrees) {
        return degrees * (Math.PI/180);
    }
}

module.exports = GeolocationModule;

