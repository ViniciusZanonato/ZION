const axios = require('axios');
const chalk = require('chalk');
const Table = require('cli-table3');
const boxen = require('boxen');
const ora = require('ora');

class CountriesModule {
    constructor() {
        this.baseUrl = 'https://restcountries.com/v3.1';
        this.fallbackData = {
            name: { common: 'Brasil', official: 'Rep√∫blica Federativa do Brasil' },
            capital: ['Bras√≠lia'],
            population: 215313498,
            area: 8515767,
            region: 'Americas',
            subregion: 'South America',
            languages: { por: 'Portuguese' },
            currencies: { BRL: { name: 'Brazilian real', symbol: 'R$' } },
            timezones: ['UTC-05:00', 'UTC-04:00', 'UTC-03:00', 'UTC-02:00'],
            borders: ['ARG', 'BOL', 'COL', 'GUF', 'GUY', 'PRY', 'PER', 'SUR', 'URY', 'VEN'],
            flag: 'üáßüá∑',
            maps: { googleMaps: 'https://goo.gl/maps/BzwUBMZUQJgxKghx8' }
        };
    }

    // Buscar pa√≠s por nome
    async getCountryByName(countryName) {
        const spinner = ora(chalk.blue(`üåç Analisando dados geopol√≠ticos: ${countryName}...`)).start();
        
        try {
            const response = await axios.get(`${this.baseUrl}/name/${encodeURIComponent(countryName)}?fullText=false`);
            const countries = response.data;
            
            if (countries && countries.length > 0) {
                spinner.succeed(chalk.green('‚úÖ Dados geopol√≠ticos obtidos com sucesso'));
                return this.formatCountryInfo(countries[0]);
            } else {
                spinner.warn(chalk.yellow('‚ö†Ô∏è Pa√≠s n√£o encontrado'));
                return null;
            }
        } catch (error) {
            spinner.fail(chalk.red('‚ùå Falha na consulta geopol√≠tica'));
            console.log(chalk.red(`‚ö†Ô∏è Erro: ${error.message}`));
            console.log(chalk.gray('   Retornando dados de emerg√™ncia...'));
            return this.formatCountryInfo(this.fallbackData);
        }
    }

    // Buscar pa√≠ses por regi√£o
    async getCountriesByRegion(region) {
        const spinner = ora(chalk.blue(`üåé Mapeando regi√£o: ${region}...`)).start();
        
        try {
            const response = await axios.get(`${this.baseUrl}/region/${encodeURIComponent(region)}`);
            const countries = response.data;
            
            if (countries && countries.length > 0) {
                spinner.succeed(chalk.green(`‚úÖ ${countries.length} pa√≠ses encontrados na regi√£o`));
                return this.formatRegionInfo(countries, region);
            } else {
                spinner.warn(chalk.yellow('‚ö†Ô∏è Regi√£o n√£o encontrada'));
                return null;
            }
        } catch (error) {
            spinner.fail(chalk.red('‚ùå Falha no mapeamento regional'));
            console.log(chalk.red(`‚ö†Ô∏è Erro: ${error.message}`));
            return null;
        }
    }

    // Buscar pa√≠ses por c√≥digo de moeda
    async getCountriesByCurrency(currencyCode) {
        const spinner = ora(chalk.blue(`üí∞ Analisando pa√≠ses com moeda: ${currencyCode}...`)).start();
        
        try {
            const response = await axios.get(`${this.baseUrl}/currency/${encodeURIComponent(currencyCode)}`);
            const countries = response.data;
            
            if (countries && countries.length > 0) {
                spinner.succeed(chalk.green(`‚úÖ ${countries.length} pa√≠ses encontrados`));
                return this.formatCurrencyInfo(countries, currencyCode);
            } else {
                spinner.warn(chalk.yellow('‚ö†Ô∏è Moeda n√£o encontrada'));
                return null;
            }
        } catch (error) {
            spinner.fail(chalk.red('‚ùå Falha na an√°lise monet√°ria'));
            console.log(chalk.red(`‚ö†Ô∏è Erro: ${error.message}`));
            return null;
        }
    }

    // Buscar pa√≠ses por idioma
    async getCountriesByLanguage(language) {
        const spinner = ora(chalk.blue(`üó£Ô∏è Mapeando pa√≠ses que falam: ${language}...`)).start();
        
        try {
            const response = await axios.get(`${this.baseUrl}/lang/${encodeURIComponent(language)}`);
            const countries = response.data;
            
            if (countries && countries.length > 0) {
                spinner.succeed(chalk.green(`‚úÖ ${countries.length} pa√≠ses encontrados`));
                return this.formatLanguageInfo(countries, language);
            } else {
                spinner.warn(chalk.yellow('‚ö†Ô∏è Idioma n√£o encontrado'));
                return null;
            }
        } catch (error) {
            spinner.fail(chalk.red('‚ùå Falha no mapeamento lingu√≠stico'));
            console.log(chalk.red(`‚ö†Ô∏è Erro: ${error.message}`));
            return null;
        }
    }

    // Comparar dois pa√≠ses
    async compareCountries(country1, country2) {
        const spinner = ora(chalk.blue(`‚öñÔ∏è Comparando: ${country1} vs ${country2}...`)).start();
        
        try {
            const [response1, response2] = await Promise.all([
                axios.get(`${this.baseUrl}/name/${encodeURIComponent(country1)}?fullText=false`),
                axios.get(`${this.baseUrl}/name/${encodeURIComponent(country2)}?fullText=false`)
            ]);
            
            const data1 = response1.data[0];
            const data2 = response2.data[0];
            
            if (data1 && data2) {
                spinner.succeed(chalk.green('‚úÖ An√°lise comparativa conclu√≠da'));
                return this.formatComparison(data1, data2);
            } else {
                spinner.warn(chalk.yellow('‚ö†Ô∏è Um ou ambos pa√≠ses n√£o encontrados'));
                return null;
            }
        } catch (error) {
            spinner.fail(chalk.red('‚ùå Falha na an√°lise comparativa'));
            console.log(chalk.red(`‚ö†Ô∏è Erro: ${error.message}`));
            return null;
        }
    }

    // Listar todos os pa√≠ses de uma regi√£o com resumo
    async listCountriesSummary(region = null) {
        const url = region ? `${this.baseUrl}/region/${encodeURIComponent(region)}` : `${this.baseUrl}/all`;
        const searchText = region ? `regi√£o ${region}` : 'mundo';
        const spinner = ora(chalk.blue(`üåç Catalogando pa√≠ses da ${searchText}...`)).start();
        
        try {
            const response = await axios.get(url);
            const countries = response.data;
            
            // Limitar a 50 pa√≠ses para n√£o sobrecarregar
            const limitedCountries = countries.slice(0, 50);
            
            spinner.succeed(chalk.green(`‚úÖ ${limitedCountries.length} pa√≠ses catalogados`));
            return this.formatCountriesList(limitedCountries, region);
        } catch (error) {
            spinner.fail(chalk.red('‚ùå Falha no processo de cataloga√ß√£o'));
            console.log(chalk.red(`‚ö†Ô∏è Erro: ${error.message}`));
            return null;
        }
    }

    // Formata√ß√£o das informa√ß√µes do pa√≠s
    formatCountryInfo(country) {
        const name = country.name.common;
        const officialName = country.name.official;
        const capitals = country.capital ? country.capital.join(', ') : 'N/A';
        const population = country.population ? country.population.toLocaleString('pt-BR') : 'N/A';
        const area = country.area ? `${country.area.toLocaleString('pt-BR')} km¬≤` : 'N/A';
        const region = country.region || 'N/A';
        const subregion = country.subregion || 'N/A';
        const flag = country.flag || 'üè≥Ô∏è';
        
        // Idiomas
        const languages = country.languages ? Object.values(country.languages).join(', ') : 'N/A';
        
        // Moedas
        let currencies = 'N/A';
        if (country.currencies) {
            currencies = Object.entries(country.currencies)
                .map(([code, info]) => `${info.name} (${info.symbol || code})`)
                .join(', ');
        }
        
        // Fusos hor√°rios
        const timezones = country.timezones ? country.timezones.slice(0, 3).join(', ') : 'N/A';
        
        // Pa√≠ses vizinhos
        const borders = country.borders ? `${country.borders.length} pa√≠ses` : 'Sem fronteiras terrestres';
        
        const info = `
${flag} ${chalk.bold.blue(name)}
${chalk.gray('Nome Oficial:')} ${officialName}

${chalk.yellow('üìç LOCALIZA√á√ÉO')}
${chalk.gray('Capital:')} ${capitals}
${chalk.gray('Regi√£o:')} ${region}
${chalk.gray('Sub-regi√£o:')} ${subregion}

${chalk.yellow('üìä ESTAT√çSTICAS')}
${chalk.gray('Popula√ß√£o:')} ${population}
${chalk.gray('√Årea:')} ${area}
${chalk.gray('Densidade:')} ${country.population && country.area ? 
            `${Math.round(country.population / country.area).toLocaleString('pt-BR')} hab/km¬≤` : 'N/A'}

${chalk.yellow('üó£Ô∏è CULTURA')}
${chalk.gray('Idiomas:')} ${languages}

${chalk.yellow('üí∞ ECONOMIA')}
${chalk.gray('Moedas:')} ${currencies}

${chalk.yellow('‚è∞ FUSO HOR√ÅRIO')}
${chalk.gray('Principais:')} ${timezones}

${chalk.yellow('üåê GEOPOL√çTICA')}
${chalk.gray('Fronteiras:')} ${borders}`;
        
        return boxen(info, {
            title: `${flag} AN√ÅLISE GEOPOL√çTICA`,
            padding: 1,
            borderColor: 'blue',
            borderStyle: 'round'
        });
    }

    // Formata√ß√£o das informa√ß√µes regionais
    formatRegionInfo(countries, region) {
        const totalPopulation = countries.reduce((sum, country) => sum + (country.population || 0), 0);
        const totalArea = countries.reduce((sum, country) => sum + (country.area || 0), 0);
        const countriesCount = countries.length;
        
        // Top 10 pa√≠ses por popula√ß√£o
        const topByPopulation = countries
            .filter(c => c.population)
            .sort((a, b) => b.population - a.population)
            .slice(0, 10);
        
        let output = boxen(
            `üåç ${chalk.bold.blue(region.toUpperCase())}\n` +
            `${chalk.gray('Pa√≠ses:')} ${countriesCount}\n` +
            `${chalk.gray('Popula√ß√£o Total:')} ${totalPopulation.toLocaleString('pt-BR')}\n` +
            `${chalk.gray('√Årea Total:')} ${totalArea.toLocaleString('pt-BR')} km¬≤\n` +
            `${chalk.gray('Densidade M√©dia:')} ${Math.round(totalPopulation / totalArea).toLocaleString('pt-BR')} hab/km¬≤`,
            {
                title: 'üåé AN√ÅLISE REGIONAL',
                padding: 1,
                borderColor: 'blue'
            }
        );
        
        // Tabela dos pa√≠ses mais populosos
        const table = new Table({
            head: [chalk.blue('Pa√≠s'), chalk.blue('Capital'), chalk.blue('Popula√ß√£o'), chalk.blue('√Årea (km¬≤)')],
            colWidths: [20, 15, 15, 15]
        });
        
        topByPopulation.forEach(country => {
            table.push([
                `${country.flag || 'üè≥Ô∏è'} ${country.name.common}`,
                country.capital ? country.capital[0] : 'N/A',
                country.population ? country.population.toLocaleString('pt-BR') : 'N/A',
                country.area ? country.area.toLocaleString('pt-BR') : 'N/A'
            ]);
        });
        
        output += '\n\n' + chalk.yellow('üìä TOP PA√çSES POR POPULA√á√ÉO') + '\n' + table.toString();
        
        return output;
    }

    // Formata√ß√£o das informa√ß√µes de moeda
    formatCurrencyInfo(countries, currencyCode) {
        const table = new Table({
            head: [chalk.blue('Pa√≠s'), chalk.blue('Nome da Moeda'), chalk.blue('S√≠mbolo'), chalk.blue('Popula√ß√£o')],
            colWidths: [20, 20, 10, 15]
        });
        
        countries.slice(0, 15).forEach(country => {
            const currency = country.currencies[currencyCode];
            table.push([
                `${country.flag || 'üè≥Ô∏è'} ${country.name.common}`,
                currency.name || currencyCode,
                currency.symbol || 'N/A',
                country.population ? country.population.toLocaleString('pt-BR') : 'N/A'
            ]);
        });
        
        const totalPopulation = countries.reduce((sum, country) => sum + (country.population || 0), 0);
        
        let output = boxen(
            `üí∞ ${chalk.bold.blue(currencyCode.toUpperCase())}\n` +
            `${chalk.gray('Pa√≠ses que usam:')} ${countries.length}\n` +
            `${chalk.gray('Popula√ß√£o Total:')} ${totalPopulation.toLocaleString('pt-BR')}`,
            {
                title: 'üí± AN√ÅLISE MONET√ÅRIA',
                padding: 1,
                borderColor: 'blue'
            }
        );
        
        output += '\n\n' + table.toString();
        
        return output;
    }

    // Formata√ß√£o das informa√ß√µes de idioma
    formatLanguageInfo(countries, language) {
        const table = new Table({
            head: [chalk.blue('Pa√≠s'), chalk.blue('Capital'), chalk.blue('Popula√ß√£o'), chalk.blue('Regi√£o')],
            colWidths: [20, 15, 15, 15]
        });
        
        countries.slice(0, 15).forEach(country => {
            table.push([
                `${country.flag || 'üè≥Ô∏è'} ${country.name.common}`,
                country.capital ? country.capital[0] : 'N/A',
                country.population ? country.population.toLocaleString('pt-BR') : 'N/A',
                country.region || 'N/A'
            ]);
        });
        
        const totalPopulation = countries.reduce((sum, country) => sum + (country.population || 0), 0);
        
        let output = boxen(
            `üó£Ô∏è ${chalk.bold.blue(language.toUpperCase())}\n` +
            `${chalk.gray('Pa√≠ses que falam:')} ${countries.length}\n` +
            `${chalk.gray('Popula√ß√£o Total:')} ${totalPopulation.toLocaleString('pt-BR')}`,
            {
                title: 'üåê AN√ÅLISE LINGU√çSTICA',
                padding: 1,
                borderColor: 'blue'
            }
        );
        
        output += '\n\n' + table.toString();
        
        return output;
    }

    // Formata√ß√£o da compara√ß√£o entre pa√≠ses
    formatComparison(country1, country2) {
        const table = new Table({
            head: ['Aspecto', chalk.blue(country1.name.common), chalk.blue(country2.name.common)],
            colWidths: [20, 25, 25]
        });
        
        // Compara√ß√µes
        const comparisons = [
            ['üè≥Ô∏è Bandeira', country1.flag || 'üè≥Ô∏è', country2.flag || 'üè≥Ô∏è'],
            ['üìç Capital', country1.capital ? country1.capital[0] : 'N/A', country2.capital ? country2.capital[0] : 'N/A'],
            ['üë• Popula√ß√£o', country1.population ? country1.population.toLocaleString('pt-BR') : 'N/A', country2.population ? country2.population.toLocaleString('pt-BR') : 'N/A'],
            ['üó∫Ô∏è √Årea (km¬≤)', country1.area ? country1.area.toLocaleString('pt-BR') : 'N/A', country2.area ? country2.area.toLocaleString('pt-BR') : 'N/A'],
            ['üåç Regi√£o', country1.region || 'N/A', country2.region || 'N/A'],
            ['üó£Ô∏è Idiomas', country1.languages ? Object.values(country1.languages).slice(0, 2).join(', ') : 'N/A', country2.languages ? Object.values(country2.languages).slice(0, 2).join(', ') : 'N/A']
        ];
        
        comparisons.forEach(row => {
            table.push(row);
        });
        
        // Calcular diferen√ßas
        let analysis = '';
        if (country1.population && country2.population) {
            const popDiff = Math.abs(country1.population - country2.population);
            const larger = country1.population > country2.population ? country1.name.common : country2.name.common;
            analysis += `\n${chalk.yellow('üìä AN√ÅLISE:')}\n`;
            analysis += `‚Ä¢ ${larger} tem ${popDiff.toLocaleString('pt-BR')} habitantes a mais\n`;
        }
        
        if (country1.area && country2.area) {
            const areaDiff = Math.abs(country1.area - country2.area);
            const larger = country1.area > country2.area ? country1.name.common : country2.name.common;
            analysis += `‚Ä¢ ${larger} √© ${areaDiff.toLocaleString('pt-BR')} km¬≤ maior\n`;
        }
        
        let output = boxen(
            `‚öñÔ∏è ${chalk.bold.blue('COMPARA√á√ÉO GEOPOL√çTICA')}\n` +
            `${country1.flag || 'üè≥Ô∏è'} ${country1.name.common} vs ${country2.flag || 'üè≥Ô∏è'} ${country2.name.common}`,
            {
                title: '‚öñÔ∏è AN√ÅLISE COMPARATIVA',
                padding: 1,
                borderColor: 'blue'
            }
        );
        
        output += '\n\n' + table.toString() + analysis;
        
        return output;
    }

    // Formata√ß√£o da lista de pa√≠ses
    formatCountriesList(countries, region) {
        const table = new Table({
            head: [chalk.blue('Pa√≠s'), chalk.blue('Capital'), chalk.blue('Popula√ß√£o'), chalk.blue('√Årea (km¬≤)')],
            colWidths: [25, 15, 15, 15]
        });
        
        countries.forEach(country => {
            table.push([
                `${country.flag || 'üè≥Ô∏è'} ${country.name.common}`,
                country.capital ? country.capital[0] : 'N/A',
                country.population ? country.population.toLocaleString('pt-BR') : 'N/A',
                country.area ? country.area.toLocaleString('pt-BR') : 'N/A'
            ]);
        });
        
        const totalPopulation = countries.reduce((sum, country) => sum + (country.population || 0), 0);
        const totalArea = countries.reduce((sum, country) => sum + (country.area || 0), 0);
        
        const title = region ? `üìä PA√çSES DA REGI√ÉO: ${region.toUpperCase()}` : 'üåç CAT√ÅLOGO MUNDIAL';
        
        let output = boxen(
            `${chalk.bold.blue(title)}\n` +
            `${chalk.gray('Total de pa√≠ses:')} ${countries.length}\n` +
            `${chalk.gray('Popula√ß√£o combinada:')} ${totalPopulation.toLocaleString('pt-BR')}\n` +
            `${chalk.gray('√Årea combinada:')} ${totalArea.toLocaleString('pt-BR')} km¬≤`,
            {
                title: 'üåé CAT√ÅLOGO GEOPOL√çTICO',
                padding: 1,
                borderColor: 'blue'
            }
        );
        
        output += '\n\n' + table.toString();
        
        return output;
    }

    // Menu de demonstra√ß√£o
    async showDemo() {
        console.log(chalk.blue.bold('\nüåç === DEMONSTRA√á√ÉO DO M√ìDULO COUNTRIES === üåç\n'));
        
        // Informa√ß√µes do Brasil
        console.log(chalk.yellow('1. Informa√ß√µes detalhadas - Brasil:'));
        const brazilInfo = await this.getCountryByName('Brazil');
        if (brazilInfo) console.log(brazilInfo);
        
        console.log('\n' + '='.repeat(80) + '\n');
        
        // Pa√≠ses da Am√©rica do Sul
        console.log(chalk.yellow('2. Pa√≠ses da Am√©rica do Sul:'));
        const saCountries = await this.getCountriesByRegion('Americas');
        if (saCountries) console.log(saCountries);
        
        console.log('\n' + '='.repeat(80) + '\n');
        
        // Pa√≠ses que falam portugu√™s
        console.log(chalk.yellow('3. Pa√≠ses que falam Portugu√™s:'));
        const portugueseCountries = await this.getCountriesByLanguage('Portuguese');
        if (portugueseCountries) console.log(portugueseCountries);
        
        console.log('\n' + '='.repeat(80) + '\n');
        
        // Compara√ß√£o Brasil vs Argentina
        console.log(chalk.yellow('4. Compara√ß√£o: Brasil vs Argentina:'));
        const comparison = await this.compareCountries('Brazil', 'Argentina');
        if (comparison) console.log(comparison);
        
        console.log(chalk.blue.bold('\nüåç === FIM DA DEMONSTRA√á√ÉO === üåç\n'));
    }
    
    // Menu de funcionalidades
    showMenu() {
        const menuOptions = [
            ['Comando', 'Descri√ß√£o', 'Exemplo'],
            ['getCountryByName(nome)', 'Informa√ß√µes detalhadas de um pa√≠s', 'getCountryByName("Japan")'],
            ['getCountriesByRegion(regi√£o)', 'Pa√≠ses de uma regi√£o espec√≠fica', 'getCountriesByRegion("Europe")'],
            ['getCountriesByCurrency(moeda)', 'Pa√≠ses que usam uma moeda', 'getCountriesByCurrency("EUR")'],
            ['getCountriesByLanguage(idioma)', 'Pa√≠ses que falam um idioma', 'getCountriesByLanguage("Spanish")'],
            ['compareCountries(pa√≠s1, pa√≠s2)', 'Comparar dois pa√≠ses', 'compareCountries("USA", "China")'],
            ['listCountriesSummary(regi√£o)', 'Listar pa√≠ses (opcional: regi√£o)', 'listCountriesSummary("Africa")'],
            ['showDemo()', 'Executar demonstra√ß√£o completa', 'showDemo()']
        ];
        
        const table = new Table({
            head: menuOptions[0].map(h => chalk.blue.bold(h)),
            colWidths: [30, 35, 30]
        });
        
        menuOptions.slice(1).forEach(option => {
            table.push(option.map(cell => chalk.white(cell)));
        });
        
        const menu = boxen(
            chalk.blue.bold('üåç M√ìDULO COUNTRIES - FUNCIONALIDADES DISPON√çVEIS\n\n') +
            table.toString() +
            '\n\n' + chalk.gray('Regi√µes dispon√≠veis: Africa, Americas, Asia, Europe, Oceania\n') +
            chalk.gray('Exemplos de moedas: USD, EUR, BRL, GBP, JPY\n') +
            chalk.gray('Exemplos de idiomas: English, Spanish, Portuguese, French'),
            {
                title: 'üó∫Ô∏è COUNTRIES API MODULE',
                padding: 1,
                borderColor: 'blue',
                borderStyle: 'double'
            }
        );
        
        console.log(menu);
        return menu;
    }
}

module.exports = CountriesModule;

